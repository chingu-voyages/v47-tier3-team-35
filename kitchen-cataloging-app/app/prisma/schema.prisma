generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
type Image{
  s3ObjKey String?
  url String?
}
// User model
model User {
  //id is auto-generated by Mongo Db and is mapped to the property _id
  id String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName String
  email String @unique
  clerkId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  foods Food[]
  rooms Room[]
  logs Log[]
}

model Room {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.ObjectId
  foods Food[]
  groceryItems GroceryItem[]
  itemCount Int @default(0)
  createdAt DateTime @default(now())
}

// food items model. Stored as an array in User
model Food {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) //purchase date
  updatedAt DateTime @updatedAt 
  title String //limit to max 30 chars
  description String? @default("") //limit to 400 chars  
  labels String[] @default([]) //limit to 20 items
  image Image?
  amount Int
  //food specific key
  price Float //limit to 2 decimal places
  threshold Int?
  expirationDate DateTime
  logs Log[] //stores log for each time user adds or subtracts this food
  roomTitle String
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  room Room? @relation(fields: [roomId], references: [id])
  roomId String? @db.ObjectId
}
model GroceryItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) //date added to list
  updatedAt DateTime @updatedAt
  title String
  description String? @default("")
  labels String[] @default([])
  image Image?
  amount Int
  //grocery item specific keys
  room Room? @relation(fields: [roomId], references: [id])
  roomId String? @db.ObjectId 
}
// Food log model -- created upon every purchase of food. Stored as an array in Food
model Log {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  price Float //limit to 2 decimal places
  amount Int
  totalCost Float //limit to 2 decimal places
  timestamp DateTime @default(now())
  food Food? @relation(fields: [foodId], references: [id])
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.ObjectId
  foodId String? @db.ObjectId
}